---
title: "Contributing"
---

#p Nanoc is the effort of %ref[url=https://github.com/nanoc/nanoc/graphs/contributors]{dozens of people}. Contributions are welcomed, no matter how small. This page shows the different ways you can make a difference to Nanoc.

#section %h{Making a donation}
  #p Nanoc is, and always will be, provided free of charge. Development is voluntary and happens entirely in free time. If you use Nanoc and like it, please consider showing your token of support by %ref[url=https://donorbox.org/nanoc]{making a donation}.

#section %h{Reporting bugs}
  #p If you find a bug in Nanoc, you should %ref[url=https://github.com/nanoc/nanoc/issues/new]{report it}! But before you do, make sure you have the latest version of Nanoc (and dependencies) installed, and see if you can still reproduce the bug there. If you can, report it!

  #p When reporting a bug, please make sure you include as many details as you can about the bug. Some information that you should include:

  #ul
    #li The Nanoc version (%command{nanoc --version}), including the Ruby version
    #li The %filename{crash.log} file, if the bug you’re reporting is a crash
    #li Steps to reproduce the bug

#section %h{Submitting feature requests}
  #p If you have an idea for a new feature, start a discussion on the %ref[url=https://groups.google.com/forum/?fromgroups#!forum/nanoc]{Nanoc Google group}.

#section %h{Contributing code}
  #p To contribute code, you need a basic knowledge of git. The %ref[url=http://try.github.io/]{Try Git} interactive tutorial is quite good for getting up to speed.

  #p Before you start coding, make sure that the idea you have fits with Nanoc’s philosophy. Start a thread on the %ref[url=http://groups.google.com/group/nanoc]{discussion group} or find us on the %ref[url=https://gitter.im/nanoc/nanoc]{Gitter channel}. Generally speaking, all bug fixes are accepted, while feature changes need more discussion.

  #note For all changes, backwards compatibility %emph{must} be retained. This means that you can add a feature, but you cannot modify a feature to work in a different way.

  #p To fetch the latest Nanoc source code, clone the Git repository:

  #listing
    %prompt{~%%} %kbd{git clone git://github.com/nanoc/nanoc.git}

  #p Create a new branch. Pick a good name; the convention is to prefix the branch name with %code{bug/} when it is a bug and with %code{feature/} if it is a feature. Once you’ve picked a branch name, create the branch:

  #listing
    %prompt{nanoc%%} %kbd{git checkout -b bug/fix-colors-on-windows}

  #p Nanoc uses %ref[url=http://bundler.io/]{Bundler} to manage its development dependencies. Run %kbd{bundle install} to install all dependencies necessary for development and testing.

  #p Now you can make modifications to the source code. You can find the source code in %filename{lib} and the tests in %filename{test}. Make sure that your changes have test cases that cover the bug fix or the new/changed functionality. To run the tests, do one of the following:

  #ul
    #li To run all tests, run %kbd{bundle exec rake}.

    #li To run style checks, run %kbd{bundle exec rake rubocop}.

    #li To run a specific test file, run %kbd{bundle exec m } %var{path_to_test_file} from a subdirectory.

    #li To run a specific spec file, run %kbd{bundle exec rspec } %var{path_to_spec_file} from a subdirectory.

  #p To test your locally modified version of Nanoc on a local Nanoc site, edit your site’s %filename{Gemfile} and let the Nanoc gem point to the locally modified version:

  #listing[lang=ruby]
    gem 'nanoc', path: '/home/denis/projects/nanoc'

  #p Finally, create a pull request. Once submitted, your work here is done. We’ll review the code, have a discussion and merge it once we’re satisfied.

#section %h{Releasing Nanoc}
  #p If you’re a release manager, you can follow these steps to release a new version of Nanoc. Before you start, make sure that you’ve got the approval of at least one other release manager (and preferably also the approval of Denis).

  #caution Being a release manager grants you considerable power, but remember that with great power comes great responsibility.

  #section %h{Requirements}
    #p Before you start, ensure that you have access to the following:

    #ul
      #li GitHub push access
      #li RubyGems push access
      #li Web site push access

    #p If you are missing any of these, let me (Denis) know and I’ll set you up.

  #section %h{Preparing for a release}
    #p Preparing a release means ensuring that the version that is about to be released meets the requirements. To prepare for a release, follow these steps:

    #ol[spacious]
      #li Ensure the %code{Nanoc::VERSION} constant is set to the right version. Keep in mind that Nanoc follows the %ref[url=http://semver.org/]{Semantic Versioning} standard.

      #li Ensure the release notes in the %filename{NEWS.md} file are up-to-date, and that the release date is correct.

      #li Run the tests using %kbd{bundle exec rake}.

      #li As a final check, compile the Nanoc site with the Nanoc gem in the %filename{Gemfile} pointing to your local Nanoc working copy, and verify locally that the release notes page is as expected.

  #section %h{Releasing the new version}
    #p Once the preparation is complete, the new version can be released. To release a new version of Nanoc, follow these steps:

    #ol[spacious]
      #li Build the gem (%kbd{gem build nanoc.gemspec}).

      #li Tag the release using %kbd{git tag --sign --annotate %var{1.2.3} --message 'Version %var{1.2.3}'}, replacing %var{1.2.3} with the new version number. Signing Git tags is optional, but highly recommended.

      #li Push the gem using %kbd{gem push nanoc-*.gem}.

      #li Push the changes to GitHub (%kbd{git push}). Don’t forget to also push the tags (%kbd{git push --tags}).

      #li Close the %ref[url=https://github.com/nanoc/nanoc/milestones]{GitHub milestone} for this version, and ensure milestones for the next patch and minor versions exist. For example, when releasing 4.2.3, close the milestone for 4.2.3, and ensure milestones for both 4.2.4 and 4.3 exist.

  #section %h{Spread the word}
    #p To announce the new release, follow these steps:

    #ol[spacious]
      #li Update the release notes on the site. This only involves recompiling the site with the new version of Nanoc (the release notes on the site are extracted from the %filename{NEWS.md} file in the Nanoc gem) and pushing the site (%kbd{bundle exec nanoc deploy}).

      #li Update the release notes on GitHub. Create a new release for the tag, set the release title to the new version number, and copy-paste the release notes into the description field.

      #li Send an announcement e-mail to the %ref[url=http://groups.google.com/group/nanoc]{Nanoc mailing list}. Include the version number, link to the release notes, instructions for how to update (using plain RubyGems and using Bundler), and instructions on how to report issues. The e-mail template that I often use is based on the following:

        #listing[template]
          Hi,

          Nanoc %var{version} is out. This %var{major/minor/patch} release %var{fixes a bug related to X/adds enhancements X and Y/adds feature X}. You can find the full release notes at the bottom of this e-mail or at http://nanoc.ws/release-notes/.

          You can update your gems using `gem update`. If you use Bundler (which I recommend), run `bundle update` to get the latest version of Nanoc.

          Do report any bugs you find on the GitHub issue tracker at https://github.com/nanoc/nanoc/issues/new.

          Cheers,

          Denis

          %var{RELEASE NOTES}

      #li Update the version mentioned on the %ref[url=https://en.wikipedia.org/wiki/Nanoc]{Nanoc Wikipedia page}.

#section %h{Contributor code of conduct}
  #section %h{Our pledge}
    #p In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.

  #section %h{Our standards}
    #p Examples of behavior that contributes to creating a positive environment include:

    #ul
      #li Using welcoming and inclusive language
      #li Being respectful of differing viewpoints and experiences
      #li Gracefully accepting constructive criticism
      #li Focusing on what is best for the community
      #li Showing empathy towards other community members

    #p Examples of unacceptable behavior by participants include:

    #ul
      #li The use of sexualized language or imagery and unwelcome sexual attention or advances
      #li Trolling, insulting/derogatory comments, and personal or political attacks
      #li Public or private harassment
      #li Publishing others’ private information, such as a physical or electronic address, without explicit permission
      #li Other conduct which could reasonably be considered inappropriate in a professional setting

  #section %h{Our responsibilities}
    #p Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.

    #p Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.

  #section %h{Scope}
    #p This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.

  #section %h{Enforcement}
    #p Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at %ref[url=mailto:denis+nanoc-coc@stoneship.org]{%uri{denis+nanoc-coc@stoneship.org}}. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.

    #p Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.

  #section %h{Attribution}
    #p This Code of Conduct is adapted from the %ref[url=http://contributor-covenant.org]{Contributor Covenant}, version 1.4, available at %ref[url=http://contributor-covenant.org/version/1/4]{%uri{http://contributor-covenant.org/version/1/4}}.
