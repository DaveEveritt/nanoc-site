---
title: "Sites"
---

#p A site managed by Nanoc is a directory with a specific structure. It contains source data, as well as processing instructions that describe how the site should be compiled.

#p By default, Nanoc uses the %code{filesystem} data source, which means that source data is stored inside the %filename{content/} directory. Nanoc can read from other sources too, including databases or web APIs. For details, see %ref[item=/doc/data-sources.*]{}.

#section %h{Creating a site}
  #p To create a site, use the %command{create-site} command. This command takes the site name as an argument. For example:

  #listing
    %prompt{%%} %kbd{nanoc create-site tutorial}
        %log-create{create}  nanoc.yaml
        %log-create{create}  Rules
        %log-create{create}  content/index.html
        %log-create{create}  content/stylesheet.css
        %log-create{create}  layouts/default.html
    Created a blank Nanoc site at 'tutorial'. Enjoy!

#section %h{Directory structure}
  #p A site has the following files and directories:

  #dl
    #dt %filename{nanoc.yaml} (or %filename{config.yaml} on older sites)
    #dd contains the site configuration

    #dt %filename{Rules}
    #dd contains compilation, routing, and layouting rules

    #dt %filename{content/}
    #dd contains the uncompiled items

    #dt %filename{layouts/}
    #dd contains the layouts

    #dt %filename{lib/}
    #dd contains custom site-specific code (filters, helpers, …)

    #dt %filename{output/}
    #dd contains the compiled site

    #dt %filename{tmp/}
    #dd contains data used for speeding up compilation (can be safely emptied)

#section %h{Code}
  #p Nanoc will load all Ruby source files in the %filename{lib/} directory before it starts compiling. All method definitions, class definitions, … will be available during the compilation process. This directory is useful for putting in custom %ref[item=/doc/helpers.*]{helpers}, custom %ref[item=/doc/filters.*]{filters}, custom %ref[item=/doc/data-sources.*]{data sources}, etc.

#section %h{Configuration}
  #p The configuration for a Nanoc site lives in the %filename{nanoc.yaml} file (or, on older sites, the %filename{config.yaml} file). The configuration file is a YAML file with several pre-defined configuration keys, but can also contain free-form data. For example:

  #listing[lang=yaml]
    prune:
      auto_prune: true
      exclude: ['.git']

    data_sources:
      - type: filesystem

    base_url: http://nanoc.ws

  #p The example above contains configuration for the pruner in the %code{prune} section (auto-prune after every compilation, but don’t touch %filename{.git}), data sources in the %code{data_sources} section (read from the filesystem), and a custom configuration option %code{base_url}.

  #p See %ref[item=/doc/reference/config.*]{} for a reference of all built-in configuration options.

#section %h{Compiling a site}
  #p To compile a site, invoke %command{nanoc} on the command line. For example:

  #listing
    %prompt{%%} %kbd{nanoc}
    Loading site data… done
    Compiling site…
          update  [0.05s]  output/doc/sites/index.html

    Site compiled in 2.42s.

  #p It is recommended to use %ref[url=http://bundler.io/]{Bundler} with Nanoc sites. When using Bundler, compiling a site is done by invoking %command{bundle exec nanoc} on the command line.

  #p To pass additional options when compiling a site, invoke the %command{nanoc compile}, and pass the desired options.

  #p Nanoc will not compile items that are not outdated. If you want to force Nanoc to recompile everything, delete the output directory and re-run the compile command.

  #p You can use %ref[url=https://github.com/guard/guard-nanoc]{%productname{guard-nanoc}} to automatically recompile the site when it changes.

#section %h[id=environments]{Environments}
  #p Nanoc supports defining multiple environments in which sites can be compiled. For example, a %code{devel} (development) and a %code{prod} (production) environment, where %code{prod} performs additional work that is typically not needed for local development, such as minifying HTML and CSS, converting all paths to be relative, and cleaning up typography.

  #p To specify an environment, pass the %code{-e} or %code{--env} option to the %command{compile} command. For example:

  #listing
    %prompt{%%} %kbd{nanoc compile --env=prod}

  #p The environment can be used to modify the configuration. If the configuration has an %code{env} section, the loaded configuration will also include the configuration options specified in the %code{env} sub-section that matches the environment name. For example:

  #listing[lang=yaml]
    base_url: http://nanoc.dev

    environments:
      prod:
        base_url: http://nanoc.ws

  #p In the example above, the value for the %code{base_url} configuration option will be %code{"http://nanoc.dev"} by default. When the environment is set to %code{prod} (using e.g. %code{--env=prod}), the value will be %code{"http://nanoc.ws"} instead.

  #p The %code{default} environment is, as the name suggests, the environment that will be used when no environment is explicitly specified. The example above is thus equivalent to the following:

  #listing[lang=yaml]
    environments:
      default:
        base_url: http://nanoc.dev
      prod:
        base_url: http://nanoc.ws

  #p The environment can also be used to affect the rules that are executed. For example:

  #listing[lang=ruby]
    compile '/book/**/*' do
      filter :kramdown
      layout '/default.*'
      filter :rubypants if ENV['NANOC_ENV'] == 'prod'
    end

  #p In the example above, the %code{:rubypants} filter will only be run if the Nanoc environment is set to %code{prod}.
