---
title: "Internals"
---

#p This document describes some of the internal workings of Nanoc. The audience of this document is potential contributors to Nanoc. You do %emph{not} need to read or understand this document to use Nanoc.

#todo This document is a work in progress. It’s highly incomplete, but will gradually be expanded to include more detail.

#section %h[id=outdatedness-checking]{Outdatedness checking}
  #p Nanoc is a smart static-site generator; it avoids recompiling items unless necessary.

  #p Nanoc will recompile an item if it is deemed to be outdated. The class responsible for determining whether or not an item is outdated is the %code{OutdatednessChecker}. An item is considered as outdated if any of the following conditions hold:

  #ul
    #li The item’s content has changed
    #li The item’s attributes have changed
    #li The site configuration has changed
    #li The rule for this item has changed
    #li Some output files for this item do not exist
    #li New items or layouts have been added
    #li A dependent item or layout is considered as outdated

  #p The last condition is necessary, because an item might use data of another item or layout.

  #section %h{Dependency tracking}
    #p If an item uses data from another entity, Nanoc will record a dependency from the former item onto the latter entity. This type of dependency is used to infer the outdatedness of an item, and is called a %firstterm{soft dependency}. Nanoc records a dependency in the following cases:

    #ul
      #li The raw content of an item or layout is accessed
      #li The compiled content of an item is accessed
      #li An attribute of an item or layout is accessed
      #li An attribute of the site configuration is accessed
      #li An item representation’s path is accessed
      #li The collection of items or layouts is accessed

    #p For example, the following code snippet will generate dependencies:

    #listing[lang=rhtml]
      <!-- Creates a dependency on the /about.* page -->
      See the <%%= link_to @items['/about.*'] %%> page.

      <!-- Creates a dependency on every item -->
      See the <%%= link_to @items.select { |i| i[:title] =~ /About/ %}.first %%> page.

      <!-- Creates a dependency on any item whose identifier matches /gallery/* -->
      <%% @items['/gallery/*'].each do |i| %%>
        <li><%%= link_to i %%></li>
      <%% end %%>

    #p For every dependency, Nanoc remembers which of the following properties are affected by the dependency:

    #ul
      #li the raw content
      #li the attributes, and which
      #li the compiled content
      #li the path

    #p An item will only be considered as outdated due to dependencies when the dependencies’ properties match the outdatedness reason of the targets of the dependency.

    #p For example, if an item B is marked as outdated due to an attribute %code{title} being changed, and another item A has a dependency on the %code{title} attribute of former item B, then the item A will be considered as outdated:

    #figure[compact]
      #img /assets/images/dependencies_and_outdatedness_b.png
      #caption Outdated, because item A depends on item B’s %code{title} attribute, which has changed

    #p If item B’s %code{tagline} attribute were changed, rather than the %code{title} attribute, then the item A would not be considered as outdated:

    #figure[compact]
      #img /assets/images/dependencies_and_outdatedness_a.png
      #caption Not outdated, because no dependency triggers outdatedness

    #p If the dependency were a dependency on the %emph{raw content} rather than the attributes, the source of the dependency would not be considered as outdated:

    #figure[compact]
      #img /assets/images/dependencies_and_outdatedness_c.png
      #caption Not outdated, because no dependency triggers outdatedness

    #p Similarly, an item that depends on a certain configuration attribute will be considered as outdated when this configuration attribute has changed.

#section %h{Compilation order}
  #p The order in which item representations are compiled, depends on the dependencies on compiled content between individual item representations.

  #section %h{Dependencies on compiled content}
    #p An item representation can depend on the compiled content of another item representation. For example, blog archive pages typically tend to contain (snippets of) the content of individual blog posts. An item representation which contains the compiled content of another item representation cannot be compiled until the compiled content of the dependent item representation is available. If this compiled content is not available and Nanoc tries to compile the item representation, then the compilation is suspended.

    #p It is normal for the compilation for an item to be suspended. It merely indicates that the dependent item representation should be compiled first. The dependencies of an item representation are not known until Nanoc has finished compiling the item representation, and so Nanoc cannot make an accurate estimation of what a proper order of compilation is. For that reason, compilation suspensions are not only expected, but commonplace.

    #p A dependency from one item representation onto another item representation’s compiled content is called a %firstterm{hard dependency}, as opposed to a soft dependency, which is used in outdatedness checking. A compilation suspension always indicates a hard dependency.

  #section %h{Compilation selection}
    #p Once Nanoc has selected the items representations that it deems are outdated (see %ref[frag=outdatedness-checking]{}), it will compile these item reps in the best possible order. The class responsible for determining this order is the %code{ItemRepSelector}.

    #p Nanoc will attempt to compile every outdated item representation sequentially. If an item representation cannot be compiled due to a compilation suspension, Nanoc will schedule a continued compilation attempt for this item representation after the dependent item representation has been compiled. If the dependent item representation was not selected for recompilation (which happens when the item representation is not deemed to be outdated), Nanoc will schedule the dependent item representation for recompilation.

    #figure[compact]
      #img /assets/images/compilation_flow.gif
      #caption A visual representation of the compilation selection process

    #note The term “compile” or “recompile” does not always mean that the item will be recompiled from scratch; Nanoc keeps a cache of compiled content and will reuse cached compiled content if possible.
