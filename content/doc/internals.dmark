---
title: "Internals"
---

#p This document describes some of the internal workings of Nanoc. The audience of this document is potential contributors to Nanoc. You do %emph{not} need to read or understand this document to use Nanoc.

#todo This document is a work in progress. It’s highly incomplete, but will gradually be expanded to include more detail.

#section %h[id=outdatedness-checking]{Outdatedness checking}
  #p Nanoc is a smart static-site generator; it avoids recompiling items unless necessary.

  #p Nanoc will recompile an item if it is deemed to be outdated. The class responsible for determining whether or not an item is outdated is the %code{OutdatednessChecker}. An item is considered as outdated if any of the following conditions hold:

  #ul
    #li The item’s content has changed
    #li The item’s attributes have changed
    #li The site configuration has changed
    #li The rule for this item has changed
    #li Some output files for this item do not exist
    #li A dependent item or layout is considered as outdated

  #p The last condition is necessary, because an item might use data of another item or layout.

  #section %h{Dependency tracking}
    #p If an item uses data from another item or layout, Nanoc will record a dependency from the former item onto the latter item or layout. This type of dependency is used purely to infer outdatedness of items, and is called a %firstterm{soft dependency}. Nanoc records a dependency when the raw content, the compiled content, attributes, or a path of another item or layout is accessed.

    #p For example, the following code snippet will generate dependencies from the item that is currently being compiled, onto other items:

    #listing[lang=rhtml]
      <!-- Creates a dependency on the /about.* page -->
      See the <%%= @items['/about.*'][:title] %%> page.

      <!-- Creates a dependency on every item -->
      See the <%%= @items.select { |i| i[:title] =~ /About/ %}.first %%> page.

    #p For every dependency, Nanoc remembers which of the following properties are affected by the dependency:

    #ul
      #li the raw content
      #li the attributes
      #li the compiled content
      #li the path

    #p An item will only be considered as outdated due to dependencies when the dependencies’ properties match the outdatedness reason of the targets of the dependency.

    #p For example, an attribute dependency on an item that is marked as outdated due to an attributes change will cause the source of the dependency to be considered as outdated:

    #figure[compact]
      #img /assets/images/dependencies_and_outdatedness_a.png
      #caption Outdated: item has an attribute dependency on an item whose attributes have changed

    #p If, on the other hand, the dependency were a dependency on the %emph{raw content} rather than the attributes, the source of the dependency would not be considered as outdated:

    #figure[compact]
      #img /assets/images/dependencies_and_outdatedness_b.png
      #caption Not outdated: item has a raw content dependency on an item whose raw content has not changed

#section %h{Compilation order}
  #p The order in which item representations are compiled, depends on the dependencies on compiled content between individual item representations.

  #section %h{Dependencies on compiled content}
    #p An item representation can depend on the compiled content of another item representation. For example, blog archive pages typically tend to contain (snippets of) the content of individual blog posts. An item representation which contains the compiled content of another item representation cannot be compiled until the compiled content of the dependent item representation is available. If this compiled content is not available and Nanoc tries to compile the item representation, then the compilation is suspended.

    #p It is normal for the compilation for an item to be suspended. It merely indicates that the dependent item representation should be compiled first. The dependencies of an item representation are not known until Nanoc has finished compiling the item representation, and so Nanoc cannot make an accurate estimation of what a proper order of compilation is. For that reason, compilation suspensions are not only expected, but commonplace.

    #p A dependency from one item representation onto another item representation’s compiled content is called a %firstterm{hard dependency}, as opposed to a soft dependency, which is used in outdatedness checking. A compilation suspension always indicates a hard dependency.

  #section %h{Compilation selection}
    #p Once Nanoc has selected the items representations that it deems are outdated (see %ref[frag=outdatedness-checking]{}), it will compile these item reps in the best possible order. The class responsible for determining this order is the %code{ItemRepSelector}.

    #p Nanoc will attempt to compile every outdated item representation sequentially. If an item representation cannot be compiled due to a compilation suspension, Nanoc will schedule a continued compilation attempt for this item representation after the dependent item representation has been compiled. If the dependent item representation was not selected for recompilation (which happens when the item representation is not deemed to be outdated), Nanoc will schedule the dependent item representation for recompilation.

    #figure[compact]
      #img /assets/images/compilation_flow.gif
      #caption A visual representation of the compilation selection process

    #note The term “compile” or “recompile” does not always mean that the item will be recompiled from scratch; Nanoc keeps a cache of compiled content and will reuse cached compiled content if possible.
