---
title: "Troubleshooting"
---

#section %h[nav-title=“Found 3 content files…”]{Error: “Found 3 content files for X; expected 0 or 1”}
  #p This error occurs for legacy identifiers when there are multiple files with the same base name, but different extensions. When using legacy identifiers, Nanoc requires each base name to be unique. For example, the following situation will give raise to this error:

  #listing
    content/assets/fonts/foo.eot
    content/assets/fonts/foo.otf

  #p Nanoc converts these filenames to identifiers which do not contain the file extension. In the example given above, both filenames correspond to the identifier %identifier{/assets/fonts/foo/}. Identifiers are required to be unique, and thus Nanoc raises an error.

  #p New in Nanoc 4 are full identifiers, which contain the file extension. We recommend upgrading to Nanoc 4 and enabling full identifiers as well as glob patterns. For details, see %ref[item=/doc/nanoc-4-upgrade-guide.*]{} and %ref[item=/doc/identifiers-and-patterns.*]{}.

#section %h[nav-title=“Can’t modify frozen…”]{Error: “can’t modify frozen…”}
  #p Once the compilation process has started, content, and attributes of layouts and items are %emph{frozen}, which means they cannot be modified anymore. For example, the following rule is invalid and will cause a “can’t modify frozen Array” error:

  #listing[lang=ruby]
    compile '/articles/**/*'
      item[:tags] << 'article'
      filter :erb
      layout 'default'
    end

  #p What %emph{is} possible, is modifying content and attributes in the preprocess phase. The preprocess phase is defined using the preprocess block in the Rules file (see %ref[item=/doc/rules.*]{}). For example:

  #listing[lang=ruby]
    preprocess do
      items.select { |i| i.identifier =~ '/articles/**/*' %}.each do |i|
        i[:tags] << 'article'
      end
    end

#section %h[nav-title=“Textual filters cannot be used…”]{Error: “Textual filters cannot be used on binary items”}
  #p There are two item types in Nanoc: textual and binary. Most filters that come with Nanoc, such as %code{:erb} and %code{:haml}, are textual, meaning they take text as input and produce new text. It is also possible to define binary filters, such as an image thumbnail filter.

  #p It is not possible to run a textual filter on binary items; for example, running %code{:erb} on an item with filename %filename{content/assets/images/puppy.jpg} will cause the “Textual filters cannot be used on binary items” error.

  #p When you are getting this error unexpectedly, double-check your Rules file and make sure that no binary item is filtered through a textual filter. Remember that Nanoc will use the first matching rule only!

#section[id=character-encoding-issues] %h{Character encoding issues}
  #p Character encoding issues manifest themselves in two ways:

  #ul
    #li
      #p Some characters do not show up correctly in the output (e.g., ä shows up as Ã¤).

    #li
      #p Nanoc exits with an error such as %output{RegexpError: invalid multibyte character}.

  #p In both cases, text in one character encoding is erroneously interpreted as a different character encoding. There are two possible causes for this.

  #section %h{Wrong output encoding tag}
    #p The text could be in the correct encoding, but Nanoc or the browser interpret it wrongly.

    #p Nanoc’s output is always UTF-8, so the output files should not declare a different encoding. For example, having %code{<meta charset="iso-8859-1">} at the top of files in %filename{output/} is wrong: it should be %code{<meta charset="utf-8">} instead. You should also ensure that your web server sends the right %code{Content-Type}.

  #section %h{Wrong input encoding}
    #p The data sources could interpret the input data in the wrong encoding.

    #p Nanoc defaults to the current environment encoding, which might not be what you expect. If the environment encoding does not match the actual file encoding, it can lead to errors in the output. There are three ways to solve this:

    #ul
      #li
        #p You can re-encode your site’s files. If your content files are not in UTF-8, this is probably a good start. Re-encoding into something else than UTF-8 is not recommended.

      #li
        #p You can modify your environment encoding to match the file encoding. If you run into encoding issues with other sites or libraries, it isn’t a bad idea to set your environment up as UTF-8 and get it over with. You should not change your environment to a non-UTF-8 encoding, as UTF-8 is considered the standard character encoding.

      #li
        #p You can set an explicit encoding in the Nanoc configuration file. This is the recommended approach, as it never hurts to be explicit.

    #p To set the encoding explicitly in the site configuration, open %filename{nanoc.yaml} (or %filename{config.yaml} on older Nanoc sites) and navigate to the section where the data sources are defined. Unless you have modified this section, you will find a single entry for the filesystem data source there. In this section, add something similar to %code{encoding: utf-8} (replacing %code{utf-8} with whatever you really want). It could look like this:

    #listing[lang=yaml]
      data_sources:
        -
          type: filesystem
          encoding: utf-8

    #p For bonus points, you can do all three. Setting up your content, environment, and configuration as UTF-8 is the best way to avoid encoding issues now and in the future.

#section %h[nav-title=YAML timestamp issues]{Timestamps in YAML files parsed incorrectly}
  #p If you work with date/time attributes (such as %code{created_at}, %code{published_at}, and %code{updated_at}) and find that the time is one or more hours off, then this section applies to you.

  #p If you use timestamps in the YAML file, be sure to include the timezone. If no timezone is specified, then UTC is assumed—not the local time zone! Quoting the %ref[url=http://yaml.org/type/timestamp.html]{YAML timestamp specification}:

  #blockquote If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part may be omitted altogether, resulting in a date format. In such a case, the time part is assumed to be %code{00:00:00Z} (start of day, UTC).

  #p We recommend always specifying the time zone.

#section %h{Hidden files are ignored}
  #p Nanoc by default intentionally ignores files and directories that have a name that starts with a period. Such files and directories are hidden on Unix-like systems, such as OS X and Linux. Nanoc does so because these hidden files and directories are often generated unintentionally; for instance, OS X will generate %filename{.DS_Store} files, and vim generates backup files with a name like %filename{.about.md.un~}.

  #p The filesystem data source can be told to include specific files that would otherwise be ignored. To do so, specify in the data source’s %code{extra_files} attribute the patterns for the files that you would like to be included. For example, the following will include %ref[url=https://github.com/blog/572-bypassing-jekyll-on-github-pages]{GitHub’s %filename{.nojekyll} file} and all files in %ref[url=https://tools.ietf.org/html/rfc5785]{the %filename{.well-known/} directory}:

  #listing[lang=yaml]
    data_sources:
      -
        type: filesystem
        extra_files:
          - "/.well-known/**/*"
          - "/.nojekyll"

  #p Alternatively, route a file whose name does not start with a slash to a path that starts with a slash. For example, the following will copy %filename{content/nojekyll} to %filename{output/.nojekyll}:

  #listing[lang=ruby]
    compile '/nojekyll' do
      write '/.nojekyll'
    end

#section %h[nav-title=Helper methods not found]{My helper methods cause a %code{NoMethodError}!}
  #p When calling a method in a helper results in a %code{NoMethodError}, you might not have activated the helper. To activate a helper, %code{include} it, like this (in a file in the %filename{lib/} directory, such as %filename{lib/helpers.rb}):

  #listing[lang=ruby]
    include Nanoc::Helpers::Blogging

  #p Make sure to double-check the spelling of the method that is being invoked.

#section %h{Error: %code{InvalidFormat}}
  #p This error occurs when Nanoc detects the presence of frontmatter, but the frontmatter isn’t terminated properly. For example, the following file will cause an %code{InvalidFormat} error, because the frontmatter is missing a final %code{---}:

  #listing[errors]
    ---
    title: Home

    Here is some content.

  #p To fix this error, terminate the frontmatter properly. For example:

  #listing
    ---
    title: Home
    %mark{---}

    Here is some content.

  #p This error can also occur when the file is not supposed to have frontmatter, and the initial %code{---} is meant to be part of the file content. For example, the following will also raise an %code{InvalidFormat} error:

  #listing[errors]
    ---

    This file starts with three dashes!

  #p To tell Nanoc to treat these three dashes part of the content, rather than signaling the start of the frontmatter, add an artificial empty frontmatter:

  #listing
    %mark{---}
    %mark{---}

    ---

    This file starts with three dashes!

#section %h{Error: %code{UnparseableMetadata}}
  #p This error occurs when the frontmatter is not valid YAML. For example, the following file will cause an %code{UnparseableMetadata} error:

  #listing[errors]
    ---
    [Not valid YAML!
    ---

    Here is some content.

  #p To fix this error, ensure the YAML in the front matter is valid. For example:

  #listing
    ---
    %mark{title: Home}
    ---

    Here is some content.

  #p For more information about YAML, see the %ref[url=http://yaml.org/YAML_for_ruby.html]{YAML for Ruby} guide, as well as the %ref[url=http://www.yaml.org/spec/1.2/spec.html]{YAML specification}.

  #p This error can also occur when the file is not supposed to have frontmatter, and the initial %code{---} is meant to be part of the file content. For example, the following will also raise an %code{UnparseableMetadata} error:

  #listing[errors]
    ---

    [0, 1[ is the interval that contains all real numbers between zero and one, including zero, but not including one.

    ---

    Another section…

  #p To tell Nanoc to treat these three dashes part of the content, rather than signaling the start of the frontmatter, add an artificial empty frontmatter:

  #listing
    %mark{---}
    %mark{---}

    ---

    [0, 1[ is the interval that contains all real numbers between zero and one, including zero, but not including one.

    ---

    Another section…

#section %h{Error: %code{InvalidMetadata}}
  #p This error occurs when the frontmatter is not a collection of key-value pairs. For example, the following file will cause an %code{UnparseableMetadata} error:

  #listing[errors]
    ---
    My about page
    ---

    Hello! This page has some details about myself.

  #p To fix this error, ensure the YAML in the front matter is a collection of key-value pairs. For example:

  #listing
    ---
    %mark{title:} My about page
    ---

    Hello! This page has some details about myself.

  #p This error can also occur when the file is not supposed to have frontmatter, and the initial %code{---} is meant to be part of the file content. For example, the following will also raise an %code{UnparseableMetadata} error:

  #listing[errors]
    ---

    Once upon a time, …

    ---

    Another section…

  #p To tell Nanoc to treat these three dashes part of the content, rather than signaling the start of the frontmatter, add an artificial empty frontmatter:

  #listing
    %mark{---}
    %mark{---}

    ---

    Once upon a time, …

    ---

    Another section…

#section %h{Error: %code{InvalidEncoding}}
  #p This error occurs when the file content cannot be interpreted in the encoding that Nanoc has inferred. For example, the following piece of code will generate a file that will cause an %code{InvalidEncoding} error if Nanoc assumes the file to be encoded as UTF-8:

  #listing[lang=ruby]
    File.write('content/broken.md', '¿', encoding: 'ISO-8859-1')

  #p See %ref[frag=character-encoding-issues]{} for details on how to fix this issue.

#section %h{Error: %code{UnknownDataSource}}
  #p This error occurs when the %filename{nanoc.yaml} configuration file lists a data source that is not known to Nanoc. For example, the following will cause a %code{UnknownDataSource} if the %code{file_system} data source is not defined:

  #listing[lang=yaml,errors]
    data_sources:
      -
        type: file_system

  #p To fix this error, verify that the data source name is spelled correctly. For example, the example above needs %code{filesystem} rather than %code{file_system}:

  #listing[lang=yaml]
    data_sources:
      -
        type: %mark{filesystem}

  #p This errors also occurs if the source files that define the data source have not yet been loaded. For example, if a (hypothetical) %code{nanoc-aether} gem defines a data source named %code{aether}, then that gem must be required before the data source can be used. In a file in the %filename{lib/} directory (e.g. %filename{lib/default.rb}), add a %code{require} for the gem:

  #listing[lang=ruby]
    require 'nanoc-aether'
