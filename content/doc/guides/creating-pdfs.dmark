---
title: "Creating PDFs"
---

#p While Nanoc is typically used to generate web sites, it can also be a useful tool when generating other types of content. This guide will give an example of how you could use Nanoc to generate PDFs via LaTeX.

#section %h{Initial setup}
  #p For the purpose of this guide, we’ll assume a new site, with a handful of Markdown documents in the %filename{content/} directory, along with the default stylesheet generated by the %command{create-site} command:

  #listing
    %prompt{%%} %kbd{tree content}
    content
    ├── stylesheet.css
    ├── index.md
    └── essays
        ├── the-nature-of-infinity.md
        └── self-consistency-in-spacetime.md

  #p The %filename{Rules} file for such a site will contain some code to handle Markdown files and pass them through kramdown:

  #listing[lang=ruby]
    compile '/**/*.md' do
      filter :kramdown
      layout '/default.*'
    end

    route '/**/*.md' do
      if item.identifier =~ '/index.*'
        '/index.html'
      else
        item.identifier.without_ext + '/index.html'
      end
    end

    compile '/**/*' do
      write item.identifier.to_s
    end

    layout '/**/*', :erb

#section %h{Adding PDF support}
  #p To generate a PDF from a Markdown document, we will need to initially convert Markdown to LaTeX, and then LaTeX to PDF. We’ll also need to set up the compilation rules to generate a PDF %emph{in addition} to the HTML files that are already being generated.

  #p The first step will be a Markdown-to-LaTeX filer. Create %filename{lib/filters/kramdown2latex.rb} with the following content:

  #listing[lang=ruby]
    require 'kramdown'

    Nanoc::Filter.define(:kramdown2latex) do |content, params|
      ::Kramdown::Document.new(content, params).to_latex
    end

  #p In order to generate a proper LaTeX file, however, we’ll need to wrap the output from kramdown to make it a proper document. A Nanoc layout fits this use case perfectly. Create %filename{layouts/article.tex.erb} with the following content:

  #listing[lang=erb]
    \documentclass{article%}

    \usepackage{inputenc%}
    \usepackage{fontenc%}
    \usepackage{listings%}
    \usepackage{hyperref%}

    \begin{document%}

    <%%= yield %%>

    \end{document%}

  #p Secondly, we’ll need a filter that converts LaTeX to PDF. Since LaTeX is text and PDF is not, the filter will need to convert from %code{:text} to %code{:binary}. The filter itself will invoke an external executable that generates the PDF (in this case, %command{pdflatex}). The filter is somewhat complex, partially due to the complexity of invoking the executable:

  #listing[lang=ruby]
    Class.new(Nanoc::Filter) do
      identifier :latex2pdf
      type :text => :binary

      TMP_BASENAME = 'nanoc-latex'
      TMP_EXTENSION = '.tex'

      def run(content, params = {%})
        Tempfile.open([TMP_BASENAME, TMP_EXTENSION]) do |f|
          f.write(content)
          f.flush

          system(
            'pdflatex',
            '-halt-on-error',
            '-output-directory',
            File.dirname(f.path),
            f.path)

          system('mv', f.path.sub('.tex', '.pdf'), output_filename)
        end
      end
    end

  #p With both the Markdown-to-LaTeX and the LaTeX-to-PDF pieces in place, this site is nearly ready to create PDFs. Add the following piece of code to the top of the %filename{Rules} file:

  #listing[lang=ruby]
    compile '/**/*.md', rep: :pdf do
      filter :kramdown2latex
      layout '/article.tex.erb'
      filter :latex2pdf
      write item.identifier.without_ext + '.pdf'
    end

  #p Note the %code{rep: :pdf} on the first line. This means that compilation rule generates a new item representation (named %code{pdf}) in addition to the default item representation that already exists (and generates HTML).

  #p Now run %command{nanoc}, and you’ll see PDF files being generated into the %filename{output/} directory.
